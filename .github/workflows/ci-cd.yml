name: CI/CD pipeline for Budget Tracker

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
jobs:          
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Install Frontend Dependencies
        working-directory: frontend/budget-tracker-fr
        run: npm install

      - name: Build Frontend
        working-directory: frontend/budget-tracker-fr
        run: npm run build

      - name: Debug Build Directory
        run: ls -la frontend/budget-tracker-fr/build

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: frontend/budget-tracker-fr/build

  deploy-frontend:
    needs: build-frontend
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: frontend/budget-tracker-fr/build

      - name: Debug Extracted Build Directory
        run: ls -la frontend/budget-tracker-fr/build
        
      - name: Deploy Frontend on S3
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
        run: |
          aws s3 sync frontend/budget-tracker-fr/build s3://track-m-bucket --delete

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Set Up Java
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Set Environment Variables
        run: |
          echo "SPRING_SECURITY_USER_NAME = ${{secrets.SPRING_SECURITY_USER_NAME}}" >> $GITHUB_ENV
          echo "SPRING_SECURITY_USER_PASSWORD = ${{secrets.SPRING_SECURITY_USER_PASSWORD}}" >> $GITHUB_ENV
          echo "FIREBASE_SERVICE_ACCOUNT_PATH = ${{secrets.FIREBASE_SERVICE_ACCOUNT_PATH}}" >> $GITHUB_ENV
      - name: Build backend with Maven
        run: mvn -f backend/budget-tracker/pom.xml clean package -Dspring.profiles.active=test

      - name: Debug Test Reports
        if: failure()
        run: cat backend/budget-tracker/target/surefire-reports/*.txt

      - name: Debug bk-Build Directory
        run: ls -la backend/budget-tracker/target

      - name: Save Build Artifact
        uses: actions/upload-artifact@v3
        with:
          name: budget-tracker-backend
          path: backend/budget-tracker/target/*.jar

  deploy-backend:
    needs: build-backend
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
          
      - name: Debug Directory Structure
        run: ls -la scripts
        
      - name: Install Dependencies
        run: pip install -r scripts/requirements.txt
        
      - name: Get Public IP of Runner
        id: get-ip
        run: echo "RUNNER_IP=$(curl -s https://api.ipify.org)">> $GITHUB_ENV

      - name: Authorize Runner IP in Security Group
        run: |
          python scripts/authorize_ip.py ${{env.RUNNER_IP}}
        env:
          AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
          AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          AWS_DEFAULT_REGION: ${{secrets.AWS_DEFAULT_REGION}}
          SECURITY_GROUP_ID: ${{secrets.SECURITY_GROUP_ID}}


  # deploy-backend:
  #   needs: [build-backend]
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3
        
      - name: Download Build Artifact
        uses: actions/download-artifact@v3
        with:
          name: budget-tracker-backend
          path: backend/budget-tracker/target

      - name: List Backend Artifacts
        run: ls -la backend/budget-tracker/target

      - name: Fetch Host Key
        run: |
          mkdir -p ~/.ssh
          ssh-keygen -R 51.20.85.188 || true # remove existing entry if any
          ssh-keyscan -H 51.20.85.188 >> ~/.ssh/known_hosts
          cat ~/.ssh/known_hosts
          
      - name: Deploy backend to EC2
        run: |
          echo "${{secrets.SSH_PRIVATE_KEY_EC2}}" >> ssh_key.pem
          chmod 400 ssh_key.pem
          echo "private key retreived"
          # Prepare target directory
          ssh -v -i ssh_key.pem -o HostKeyAlgorithms=+ssh-rsa -o StrictHostKeyChecking=no ec2-user@51.20.85.188 << EOF
          echo "SSH Connection Successful"
          mkdir -p /home/ec2-user/track-m-app/backend/resources
          mkdir -p /home/ec2-user/track-m-app/backend/target
          EOF
          # Create firebase service account file
          echo "${{ secrets.FIREBASE_SERVICE_ACCOUNT_KEY }}" >> firebaseServiceAccountKey.json
          chmod 600 firebaseServiceAccountKey.json
          scp -i ssh_key.pem -o HostKeyAlgorithms=+ssh-rsa -o StrictHostKeyChecking=no firebaseServiceAccountKey.json ec2-user@<EC2_INSTANCE_IP>:/home/ec2-user/backend/resources/
          echo "Service account key transferred to EC2"
          # Copy new/updated .jar file to the server
          scp -i ssh_key.pem -o HostKeyAlgorithms=+ssh-rsa -o StrictHostKeyChecking=no backend/budget-tracker/target/*.jar ec2-user@51.20.85.188://home/ec2-user/track-m-app/backend/target/
          echo "jar file copied to ec2..."
          echo "deploying backend..."
          ssh -i ssh_key.pem -o HostKeyAlgorithms=+ssh-rsa -o StrictHostKeyChecking=no ec2-user@51.20.85.188 << EOF
          echo "SSH Connection Successful"
          export SPRING_SECURITY_USER_NAME=${{secrets.SPRING_SECURITY_USER_NAME}}
          export SPRING_SECURITY_USER_PASSWORD=${{secrets.SPRING_SECURITY_USER_PASSWORD}}
          export FIREBASE_SERVICE_ACCOUNT_PATH=${{secrets.FIREBASE_SERVICE_ACCOUNT_PATH}}
          # pkill -f 'java -jar /home/ec2-user/track-m-app/backend/target/*.jar' || true
          nohup java -jar /home/ec2-user/track-m-app/backend/target/*.jar > /home/ec2-user/track-m-app/backend/app.log 2>&1 &
          echo "App is up and running :* "
          EOF

  revoke-security-group:
    needs: [deploy-frontend, deploy-backend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies
        run: pip install -r scripts/requirements.txt
        
      - name: Revoke Runner IP from security Group
        run: |
          python scripts/revoke_ip.py ${{env.RUNNER_IP}}
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          SECURITY_GROUP_ID: ${{ secrets.SECURITY_GROUP_ID }}

  
